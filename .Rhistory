pt(0.05, df = 237)
?pt
pt(1-0.05, df = 237)
pt(1-0.05, df = 237)
pt(1-0.05, df = 237)
pt(0.975, df = 237)
qt(0.975, df = 237)
-2.365*c(-1,1)+1.97*0.222
-2.365+1.97*0.222
-2.365-1.97*0.222
-2.365+1.97*c(-1,1)*0.222
0.467+1.97*c(-1,1)*0.062
0.083+1.97*c(-1,1)*0.070
qchisq(df = 2)
dchisq(df=2)
qchisq(1, df=2)
qchisq(0.95, 2)
qchisq(0.9995)
qchisq(0.9995, 1)
qchisq(0.9995, 2)
qchisq(0.9995, 2)
prop.test()
prop.test(x = 168, n = 740, conf.level = 0.9995)
qnorm(0.9995)
qnorm(0.975)
qnorm(0.025)
library("smartstats")
# Exercise 1.1
x <- c(2474, 2547, 2830, 3219, 3429, 3448, 3677, 3872, 4001, 4116)
y <- c(2844, 2863, 2963, 3239, 3379, 3449, 3582, 3926, 4151, 4356)
# a)
mean(x)
var(x)
sd(x)
# b)
mean(y)
var(y)
sd(y)
# c)
quantile(x, type=2)
data <- data.frame(Females = x, Males = y)
boxplot(data)
# e)
cv(x, 3)
??cv
# e)
cv(x, 3)
# e)
cv(x)
cv(y)
# e)
cv(x, 1)
cv(y, 1)
# a)
(251+1)/2
34+28+43+42
34+28+43
34+28+43+42
# a)
(251+1)/2
34+28+43
34+28+43+42
251*0.25
251*0.25
251*0.5
251*0.75
251*0.25
251*0.5
251*0.75
source('~/.active-rstudio-document')
251*0.25
ceil(251*0.25)
ceiling(251*0.25)
251*0.5
ceiling(251*0.5)
251*0.75
ceiling(251*0.75)
# b)
ceiling(251*0.25)
ceiling(251*0.5)
# b)
#25th quartile. Ceiling because it's a non-integer
ceiling(251*0.25)
34+28
ceiling(251*0.75)
34+28+43+42
34+28+43+42+39
#75th quartile. Ceiling because it's a non-integer
ceiling(251*0.75)
34+28+43+42+39
patient <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
before <- c(9.1, 8.0, 7.7, 10.0, 9.6, 7.9, 9.0, 7.1, 8.3, 9.6, 8.2, 9.2, 7.3, 8.5, 9.5)
after <- c(8.2, 6.4, 6.6, 8.5, 8.0, 5.8, 7.8, 7.2, 6.7, 9.8, 7.1, 7.7, 6.0, 6.6, 8.4)
median(before)
# a)
median(before)
median(after)
# b)
sd(before)
sd(after)
# c)
cv(before)
cv(after)
library("smartstats")
# c)
cv(before)
cv(after)
??cv
# c)
cov(before)
# c)
covariance(before)
??covariance
# c)
var(before)
# c)
cov(before)
# c)
cov(before, after)
# d)
cor(before, after)
# e)
diff <- before - after
mean(diff)
var(diff)
sd(diff)
boxplot(diff)
# c)
cov(before, after)
# d)
cor(before, after)
after
mean(diff)
var(diff)
sd(diff)
boxplot(diff)
??dbinom
# b)
pbinom(5, 10, 0.6)
pbinom(4, 10, 0.6)
dbinom(5, 10, 0.6)
# b)
pbinom(5, 10, 0.6)
pbinom(4, 10, 0.6)
1 - pbinom(4, 10, 0.6)
dbinom(5, 10, 0.6)
# d)
ppois(5, 3)
ppois(4, 3)
1 - ppois(4, 3)
dpois(5, 3)
source('~/.active-rstudio-document')
n <- 250
standardDev <- sqrt(n*p*(1- p))
# a)
# Because we're looking for the amount that fail
p <- 1 - 0.8
n <- 250
mu <- n * p
standardDev <- sqrt(n*p*(1- p))
# a)
# Because we're looking for the amount that fail
p <- 1 - 0.8
n <- 250
# Expected value:
n * p
# Standard deviation
standardDev <- sqrt(n*p*(1- p))
# a)
# Because we're looking for the amount that fail
p <- 1 - 0.8
n <- 250
# Expected value:
n * p
# Standard deviation
sqrt(n*p*(1- p))
# a)
# Because we're looking for the amount that fail
p <- 1 - 0.8
n <- 250
# Expected value:
n * p
# Standard deviation:
sqrt(n*p*(1- p))
+
<
>
# There is 1 note with the number 4
a <- 1
# 6 notes in total
N <- 6
# 2 draws
n <- 2
dhyper(x=0, m=a, n=N, k=n)
dhyper(x=0, m=a, n=N-a, k=n)
# Mean
n*a/N
devtools::document()
setwd("D:/Daniel/smartstats")
devtools::document()
devtools::install_github("DanielEverland/smartstats")
detach("package:smartstats", unload=TRUE)
devtools::install_github("DanielEverland/smartstats")
library("smartstats")
# There is 1 note with the number 4
a <- 1
# 6 notes in total
N <- 6
# 2 draws
n <- 2
# Mean
n*a/N
hyperMean(a, N, n)
# variance
hyperVar(a, N, n)
devtools::document()
detach("package:smartstats", unload=TRUE)
devtools:install()
devtools::install()
library("smartstats")
# There is 1 note with the number 4
a <- 1
# 6 notes in total
N <- 6
# 2 draws
n <- 2
# Mean
n*a/N
hyperMean(a, N, n)
# variance
hyperVar(a, N, n)
# variance
hyperVar(a, N, n)
# P(x = 0)
dhyper(x=0, m=a, n=N-a, k=n)
hyperVar <- function(a, N, n) {
n * ((a*(N - a)/N^2)) * ((N - n)/(N - 1))
}
# variance
hyperVar(a, N, n)
devtools::document()
devtools::document()
devtools::document()
detach("package:smartstats", unload=TRUE)
devtools::install_github("DanielEverland/smartstats")
# There is 1 note with the number 4
a <- 1
# 6 notes in total
N <- 6
# 2 draws
n <- 2
# Mean
hyperMean(a, N, n)
# Variance
hyperVar(a, N, n)
# P(x = 0)
dhyper(x=0, m=a, n=N-a, k=n)
# Exercise 2.3
library("smartstats")
# There is 1 note with the number 4
a <- 1
# 6 notes in total
N <- 6
# 2 draws
n <- 2
# Mean
hyperMean(a, N, n)
# Variance
hyperVar(a, N, n)
# P(x = 0)
dhyper(x=0, m=a, n=N-a, k=n)
.rs.restartR()
?remove.packages()
devtools::install_github("DanielEverland/smartstats")
# Exercise 2.3
library("smartstats")
# There is 1 note with the number 4
a <- 1
# 6 notes in total
N <- 6
# 2 draws
n <- 2
# Mean
hyperMean(a, N, n)
# Variance
hyperVar(a, N, n)
# P(x = 0)
dhyper(x=0, m=a, n=N-a, k=n)
# Exercise 2.3
library("smartstats")
# There is 1 note with the number 4
a <- 1
# 6 notes in total
N <- 6
# 2 draws
n <- 2
# Mean
hyperMean(a, N, n)
# Variance
hyperVar(a, N, n)
# P(x = 0)
dhyper(x=0, m=a, n=N-a, k=n)
# b)
dbinom(0, size = 6, prob = 1/6)
# b)
dbinom(0, size = 2, prob = 1/6)
# b)
dbinom(0, size = 2, prob = 1/6)
source('D:/Google Drive/Skole/Introduktion til statestik/Eksamen/Exercise2_3.R')
dhyper(x=0, m=6, n=20-6, k=3)
dhyper(x=0, m=2, n=6-4, k=4)
dhyper(x=0, m=2, n=6-2, k=4)
# a)
# There are 6 products with discrepancies
a <- 6
# 20 products in total
N <- 20
# 3 draws
n <- 3
dhyper(x=0, m=a, n=N-a, k=n)
devtools::document()
# a)
binomMean <- function(n, p) {
n * p
}
binomMean(3, 1/10)
binomVar <- function(n, p) {
n * p * (1 - p)
}
binomVar(3, 1/10)
# a)
??hyperMean
# a)
hyperMean(a=2, N=20, n=3)
hyperVar(a=2, N=20, n=3)
# a)
hyperMean(a=2, N=20, n=3)
hyperVar(a=2, N=20, n=3)
??dhyp
# a)
hyperMean(a=2, N=20, n=3)
hyperVar(a=2, N=20, n=3)
# There are 2 infected bales of hay
a <- 2
# 20 bales of hay in total
N <- 20
# 3 draws
n <- 3
dhyper(x=0, m=a, n=N-a, k=n)
dhyper(x=1, m=a, n=N-a, k=n)
# a)
hyperMean(a=2, N=20, n=3)
hyperVar(a=2, N=20, n=3)
# There are 2 infected bales of hay
a <- 2
# 20 bales of hay in total
N <- 20
# 3 draws
n <- 3
# P(X >= 1)
1 - dhyper(x=0, m=a, n=N-a, k=n)
# b)
dbinom(x=0, size=10, prob=0.01)
dbinom(x=0, size=10, prob=0.10)
ppois(q=5, lambda)
ppois(q=5, 1.6)
1- ppois(q=5, 1.6)
# a)
1 - ppois(q=5, 1.6)
# a)
1 - ppois(q=5, 1.6)
dpois(x=8/5, 1.6)
dpois(x=8/5, lambda = 1.6)
8/5
ppois(q=8, lambda = 1.6*5)
# a)
1 - ppois(5, 19/5)
# a)
1 - ppois(q=5, lambda=19/5)
180/60*5
# a)
1 - ppois(q=19, lambda=180/60*5)
# a)
1 - ppois(q=19, lambda=180/60*5)
# Quiz 2
library("smartstats")
hyperMean(a=6, N = 20, n = 3)
hyperVar(a=6, N = 20, n = 3)
# Quiz 2
hyperMean(a=6, N = 20, n = 3)
hyperVar(a=6, N = 20, n = 3)
# P(X <= 20)
pnorm(20, mean = 24, sd = sqrt(16))
# P(X > 29.5)
1 - pnorm(29.5, mean = 24, sd = sqrt(16))
# P(X = 23.8)
dnorm(23.8, mean = 24, sd = sqrt(16))
# a)
# P(X <= 20)
pnorm(20, mean = 24, sd = sqrt(16))
# P(X > 29.5)
1 - pnorm(29.5, mean = 24, sd = sqrt(16))
# P(X = 23.8)
dnorm(23.8, mean = 24, sd = sqrt(16))
# a)
# P(X <= 20)
pnorm(20, mean = 24, sd = sqrt(16))
# P(X > 29.5)
1 - pnorm(29.5, mean = 24, sd = sqrt(16))
source('D:/Google Drive/Skole/Introduktion til statestik/Eksamen/Exercise2_10.R')
# a)
pnorm(q=10, mean = 65 - 54, sd = sqrt(4^2 + 3^2))
# a)
pnorm(q=10, mean = 65 - 54, sd = sqrt(4^2 + 3^2))
# b)
# Mean
100 * 54
# Standard deviation
sqrt(100 * 3^2)
1 - pnorm(q=7, mean = 3000, sd = 3)
1 - pnorm(q=2993, mean = 3000, sd = 3)
pnorm(q=2993, mean = 3000, sd = 3)
pnorm(q=2993, mean = 3000, sd = 3) + 1 - pnorm(q=3007, mean = 3000, sd = 3)
# a)
pnorm(q=2993, mean = 3000, sd = 3) + 1 - pnorm(q=3007, mean = 3000, sd = 3)
# a)
??poisson
# a)
dpoisson(0, 110000/365/24/60/2)
# a)
dpois(0, 110000/365/24/60/2)
# a)
1-dpois(0, 110000/365/24/60/2)
# a)
dpois(0, 110000/(365*24*2))
# a)
dpois(0, 110000/365/24/2)
# a)
dpois(0, 110000/365/24/2)
# b)
dpois(0, 110000/365/24/4)
# Q2
dpois(10/2, lambda = 5)
# Q2
dpois(10, lambda = 5*2)
# Q2
dpois(10, lambda = 5/2)
# Q2
dpois(10, lambda = 5*2)
# Q3
dbinom(3, 2, prob=0.5)
# Q3
dbinom(3, size=2, prob=0.5)
# Q3
dbinom(x = 3, size=2, prob=0.5)
# Q3
pbinom(x = 3, size=2, prob=0.5)
# Q3
dbinom(x = 3, size=2, prob=0.5)
# Q3
dbinom(x = 3, size=20, prob=0.5)
(1/2)^3
(1/2)*3
# Q3
dbinom(x = 3, size=3, prob=0.5)
rbinom(1, size=3, prob=0.5)
rbinom(1, size=3, prob=0.5)
rbinom(1, size=3, prob=0.5)
rbinom(1, size=3, prob=0.5)
dbinom(1, size=3, prob=0.5)
dbinom(3, size=3, prob=0.5)
dbinom(4, size=3, prob=0.5)
dbinom(3, size=4, prob=0.5)
dbinom(3, size=3, prob=0.5)
dbinom(3, size=4, prob=0.5)
# Q5
1 - dnorm(30, mean=36, sd=3)
# Q3
dbinom(x = 3, size=3, prob=0.5)
# Q3
2*dbinom(x = 3, size=3, prob=0.5)
# Q3
# One brother must either win all three times or none at all
dbinom(x = 3, size=3, prob=0.5) + dbinom(x = 0, size=3, prob=0.5)
# Q4
# One brother must either
dbinom(x = 4, size=3, prob=0.5) + dbinom(x = 0, size=3, prob=0.5)
# Q4
# One brother must either win 3 of 4 or none at all
dbinom(x = 4, size=3, prob=0.5) + dbinom(x = 1, size=3, prob=0.5)
0
# Either is good, which gives:
(1/2^4)+(1/2)^4
# Q2
dpois(10, lambda = 5*2)
Q3
# Q3
# One brother must either win all three times or none at all
dbinom(x = 3, size=3, prob=0.5) + dbinom(x = 0, size=3, prob=0.5)
# Q4
# Either brother 1 wins the first round and brother 2 the next three
1/2*(1/2)^3=1/2^4
# Q5
1 - dnorm(30, mean=36, sd=3)
# Q5
1 - dnorm(30, mean=36, sd=3)
# Q5
1 - dnorm(30, mean=36, sd=3)
# Q5
1 - dnorm(30, mean=36, sd=3)
# Q5
1 - dnorm(30, mean=36, sd=3)
